// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package types

import (
	"bytes"
	"fmt"
	"io"
	"strconv"

	"github.com/getprobo/probo/pkg/coredata"
	"github.com/getprobo/probo/pkg/gid"
	"github.com/getprobo/probo/pkg/page"
)

type Node interface {
	IsNode()
	GetID() gid.GID
}

type Audit struct {
	ID        gid.GID    `json:"id"`
	Framework *Framework `json:"framework"`
	Report    *Report    `json:"report,omitempty"`
	ReportURL *string    `json:"reportUrl,omitempty"`
}

func (Audit) IsNode()             {}
func (this Audit) GetID() gid.GID { return this.ID }

type AuditConnection struct {
	Edges    []*AuditEdge `json:"edges"`
	PageInfo *PageInfo    `json:"pageInfo"`
}

type AuditEdge struct {
	Cursor page.CursorKey `json:"cursor"`
	Node   *Audit         `json:"node"`
}

type Document struct {
	ID           gid.GID               `json:"id"`
	Title        string                `json:"title"`
	DocumentType coredata.DocumentType `json:"documentType"`
}

func (Document) IsNode()             {}
func (this Document) GetID() gid.GID { return this.ID }

type DocumentConnection struct {
	Edges    []*DocumentEdge `json:"edges"`
	PageInfo *PageInfo       `json:"pageInfo"`
}

type DocumentEdge struct {
	Cursor page.CursorKey `json:"cursor"`
	Node   *Document      `json:"node"`
}

type ExportDocumentPDFInput struct {
	DocumentID gid.GID `json:"documentId"`
}

type ExportDocumentPDFPayload struct {
	Data string `json:"data"`
}

type Framework struct {
	ID   gid.GID `json:"id"`
	Name string  `json:"name"`
}

func (Framework) IsNode()             {}
func (this Framework) GetID() gid.GID { return this.ID }

type Mutation struct {
}

type Organization struct {
	ID      gid.GID `json:"id"`
	Name    string  `json:"name"`
	LogoURL *string `json:"logoUrl,omitempty"`
}

func (Organization) IsNode()             {}
func (this Organization) GetID() gid.GID { return this.ID }

type PageInfo struct {
	HasNextPage     bool            `json:"hasNextPage"`
	HasPreviousPage bool            `json:"hasPreviousPage"`
	StartCursor     *page.CursorKey `json:"startCursor,omitempty"`
	EndCursor       *page.CursorKey `json:"endCursor,omitempty"`
}

type Query struct {
}

type Report struct {
	ID          gid.GID `json:"id"`
	Filename    string  `json:"filename"`
	DownloadURL *string `json:"downloadUrl,omitempty"`
}

func (Report) IsNode()             {}
func (this Report) GetID() gid.GID { return this.ID }

type TrustCenter struct {
	ID           gid.GID             `json:"id"`
	Active       bool                `json:"active"`
	Slug         string              `json:"slug"`
	Organization *Organization       `json:"organization"`
	Documents    *DocumentConnection `json:"documents"`
	Audits       *AuditConnection    `json:"audits"`
	Vendors      *VendorConnection   `json:"vendors"`
}

func (TrustCenter) IsNode()             {}
func (this TrustCenter) GetID() gid.GID { return this.ID }

type Vendor struct {
	ID               gid.GID                 `json:"id"`
	Name             string                  `json:"name"`
	Category         coredata.VendorCategory `json:"category"`
	WebsiteURL       *string                 `json:"websiteUrl,omitempty"`
	PrivacyPolicyURL *string                 `json:"privacyPolicyUrl,omitempty"`
}

func (Vendor) IsNode()             {}
func (this Vendor) GetID() gid.GID { return this.ID }

type VendorConnection struct {
	Edges    []*VendorEdge `json:"edges"`
	PageInfo *PageInfo     `json:"pageInfo"`
}

type VendorEdge struct {
	Cursor page.CursorKey `json:"cursor"`
	Node   *Vendor        `json:"node"`
}

type Role string

const (
	RoleNone Role = "NONE"
	RoleUser Role = "USER"
)

var AllRole = []Role{
	RoleNone,
	RoleUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleNone, RoleUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Role) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Role) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
